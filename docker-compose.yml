version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: quant_trading_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-quant_trading}
      POSTGRES_USER: ${POSTGRES_USER:-trader}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trader}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quant_network
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: quant_trading_redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quant_network
    restart: unless-stopped

  # Grafana 监控面板
  grafana:
    image: grafana/grafana:latest
    container_name: quant_trading_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - quant_network
    restart: unless-stopped

  # Prometheus 指标收集
  prometheus:
    image: prom/prometheus:latest
    container_name: quant_trading_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - quant_network
    restart: unless-stopped

  # 量化交易主程序（可选，通常在宿主机运行）
  # trading_bot:
  #   build: .
  #   container_name: quant_trading_bot
  #   env_file: .env
  #   environment:
  #     - ENVIRONMENT=${ENVIRONMENT:-development}
  #     - POSTGRES_HOST=postgres
  #     - REDIS_HOST=redis
  #   volumes:
  #     - ./logs:/app/logs
  #     - ./data:/app/data
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - quant_network
  #   restart: unless-stopped
  #   command: python main.py --mode paper

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  quant_network:
    driver: bridge
